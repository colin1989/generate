package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"strings"
	"text/template"
)

type FieldInfo struct {
	Name string
	Tag  string
}

type StructInfo struct {
	Name   string
	Fields []FieldInfo
}

// 在模板中，{{- 和 -}} 被用来消除生成代码中的空格和换行符。
// 这样，只有在 {{ 和 }} 之间的内容是紧凑的，其他地方都没有额外的空格或换行符。
const templateStr = `func (u *{{.Name}}) ToBson() bson.M {
	b := bson.M{}
{{- range .Fields }}
	b[{{ .Tag }}] = u.{{ .Name }}
{{- end }}
	return b
}`

var excludID bool

func main() {
	// 使用 flag 包解析命令行参数
	flag.BoolVar(&excludID, "id", true, "exclude id field")
	flag.Parse()

	filename := os.Getenv("GOFILE")
	if filename == "" {
		log.Fatal("Usage: generate_tobson -f=<filename> or specify $GOFILE in go:generate")
	}

	src, err := os.ReadFile(filename)
	if err != nil {
		log.Fatal(err)
	}

	fset := token.NewFileSet()
	// 解析 Go 文件
	node, err := parser.ParseFile(fset, filename, src, parser.ParseComments)
	if err != nil {
		log.Fatal(err)
	}

	var structs []StructInfo

	// 遍历文件中的结构体定义
	for _, decl := range node.Decls {
		genDecl, ok := decl.(*ast.GenDecl)
		if !ok || genDecl.Tok != token.TYPE {
			continue
		}

		for _, spec := range genDecl.Specs {
			typeSpec, ok := spec.(*ast.TypeSpec)
			if !ok {
				continue
			}

			structType, ok := typeSpec.Type.(*ast.StructType)
			if !ok {
				continue
			}

			var fields []FieldInfo
			for _, field := range structType.Fields.List {
				if len(field.Names) == 0 {
					continue
				}
				fieldName := field.Names[0].Name
				if field.Tag == nil {
					continue
				}
				tag, ok := parseTag(field.Tag.Value)
				if !ok {
					continue
				}
				fields = append(fields, FieldInfo{Name: fieldName, Tag: tag})
			}

			if len(fields) == 0 {
				continue
			}

			structs = append(structs, StructInfo{Name: typeSpec.Name.Name, Fields: fields})
		}
	}

	isTest := strings.HasSuffix(node.Name.Name, "_test")

	generatedCodes := []string{"// Code generated by tobson-gen-go. DO NOT EDIT.\n"}
	headStr := fmt.Sprintf("package %v\n\nimport (\n\t\"go.mongodb.org/mongo-driver/bson\"\n)",
		node.Name.Name)

	generatedCodes = append(generatedCodes, headStr)

	tpl, err := template.New("tobson").Parse(templateStr)
	if err != nil {
		log.Fatal(err)
	}
	// 生成代码并写入文件
	for _, s := range structs {
		var buf bytes.Buffer
		err = tpl.Execute(&buf, s)
		if err != nil {
			log.Fatal(err)
		}

		// generatedCode := buf.String()
		generatedCodes = append(generatedCodes, buf.String())
	}

	// 写入到 user_generated.go 文件中
	generatedFilename := fmt.Sprintf("%v_auto.go", strings.TrimSuffix(filename, ".go"))
	if isTest {
		generatedFilename = fmt.Sprintf("%v_auto_test.go", strings.TrimSuffix(filename, ".go"))
	}

	f, err := os.OpenFile(generatedFilename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	_, err = f.WriteString(strings.Join(generatedCodes, "\n\n"))
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Generated file %s\n", generatedFilename)
}

func parseTag(tag string) (string, bool) {
	tag = strings.Trim(tag, "`")
	parts := strings.Split(tag, " ")
	for _, part := range parts {
		if !strings.HasPrefix(part, "bson:") {
			continue
		}

		suf := strings.TrimPrefix(part, "bson:")
		if suf == "\"-\"" {
			return "", false
		}
		if excludID && suf == "\"_id\"" {
			return "", false
		}

		return suf, true
	}
	return "", false
}
